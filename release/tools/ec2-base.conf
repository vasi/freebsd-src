#!/bin/sh

. ${WORLDDIR}/release/tools/ec2.conf

# Packages to install into the image we're creating.  In addition to packages
# present on all EC2 AMIs, we install:
# * ec2-scripts, which provides a range of EC2ification startup scripts,
# * firstboot-freebsd-update, to install security updates at first boot,
# * firstboot-pkgs, to install packages at first boot, and
# * isc-dhcp44-client, used for IPv6 network setup.
#export VM_EXTRA_PACKAGES="${VM_EXTRA_PACKAGES} ec2-scripts \
#    firstboot-freebsd-update firstboot-pkgs isc-dhcp44-client"
export VM_EXTRA_PACKAGES=

# Services to enable in rc.conf(5).
#export VM_RC_LIST="${VM_RC_LIST} ec2_configinit ec2_ephemeral_swap \
#    ec2_fetchkey ec2_loghostkey firstboot_freebsd_update firstboot_pkgs \
#    growfs sshd"
export VM_RC_LIST="growfs sshd"

export VMSIZE=10g

vm_extra_install_packages() {
  # No pkg, please
}

vm_extra_pre_umount() {
	# The AWS CLI tools are generally useful, and small enough that they
	# will download quickly; but users will often override this setting
	# via EC2 user-data.
	echo 'firstboot_pkgs_list="devel/py-awscli"' >> ${DESTDIR}/etc/rc.conf

	# EC2 instances use DHCP to get their network configuration.  IPv6
	# requires accept_rtadv.
	echo 'ifconfig_DEFAULT="SYNCDHCP accept_rtadv"' >> ${DESTDIR}/etc/rc.conf

	# Enable IPv6 on all interfaces, and spawn DHCPv6 via rtsold
	echo 'ipv6_activate_all_interfaces="YES"' >> ${DESTDIR}/etc/rc.conf
	echo 'rtsold_enable="YES"' >> ${DESTDIR}/etc/rc.conf
	echo 'rtsold_flags="-M /usr/local/libexec/rtsold-M -a"' >> ${DESTDIR}/etc/rc.conf

	# Provide a script which rtsold can use to launch DHCPv6
	mkdir -p ${DESTDIR}/usr/local/libexec
	cat > ${DESTDIR}/usr/local/libexec/rtsold-M <<'EOF'
#!/bin/sh

/usr/local/sbin/dhclient -6 -nw -N -cf /dev/null $1
EOF
	chmod 755 ${DESTDIR}/usr/local/libexec/rtsold-M

	# Any EC2 ephemeral disks seen when the system first boots will
	# be "new" disks; there is no "previous boot" when they might have
	# been seen and used already.
	touch ${DESTDIR}/var/db/ec2_ephemeral_diskseen

	# Configuration common to all EC2 AMIs
	ec2_common

	pw -R ${DESTDIR} useradd vasi -m -G wheel -u 1001
	install -N ${DESTDIR}/etc -d -o vasi -m 700 ${DESTDIR}/home/vasi/.ssh
	install -N ${DESTDIR}/etc -o vasi -m 600 /dev/null ${DESTDIR}/home/vasi/.ssh/authorized_keys
	echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOgw/ofrxXWdq8EcVG2T22uHYy5haFm+WHyK0Q4BNAfd vasi@sylph' \
		>> ${DESTDIR}/home/vasi/.ssh/authorized_keys

	git clone /usr/ports ${DESTDIR}/usr/ports

  install -d ${DESTDIR}/var/freebsd-snapshot
  for i in MANIFEST base.txz src.txz lib32.txz; do
    cp /var/freebsd-snapshot/15.0-CURRENT/ftp/$i ${DESTDIR}/var/freebsd-snapshot/$i
  done

	install -d ${DESTDIR}/usr/local/etc/pkg/repos
	cat <<EOF > ${DESTDIR}/usr/local/etc/pkg/repos/FreeBSD.conf
FreeBSD: { enabled: no }
EOF
	cat <<EOF > ${DESTDIR}/usr/local/etc/pkg/repos/poudriere.conf
poudriere: {
  url: "file:///usr/local/poudriere/data/packages/default-default",
  signature_type: "none",
  enabled: yes
}
EOF
	cat <<'EOF' > ${DESTDIR}/usr/local/etc/poudriere.conf
PARALLEL_JOBS=5
USE_TMPFS=all
TMPFS_LIMIT=30
TMPFS_BLACKLIST="rust chromium electron* llvm* firefox *webkit* *webengine* libreoffice"
PRIORITY_BOOST="vscode gcc13 texlive-texmf chromium"

ZPOOL=poudriere
RESOLV_CONF=/etc/resolv.conf
BASEFS=/usr/local/poudriere
USE_PORTLINT=no
TMPFS_BLACKLIST_TMPDIR="${BASEFS}/data/cache/tmp"
DISTFILES_CACHE=/usr/ports/distfiles
CHECK_CHANGED_OPTIONS=verbose
CHECK_CHANGED_DEPS=yes
CCACHE_DIR=/var/cache/ccache
WRKDIR_ARCHIVE_FORMAT=tzst
ALLOW_MAKE_JOBS=yes
MAX_EXECUTION_TIME=172800
NOHANG_TIME=86400
KEEP_OLD_PACKAGES=yes
EOF
  install -d ${DESTDIR}/usr/local/etc/poudriere.d
	cat <<EOF > ${DESTDIR}/usr/local/etc/poudriere.d/make.conf
DISABLE_LICENSES=yes
PKG_COMPRESSION_LEVEL=3
EOF

	return 0
}
